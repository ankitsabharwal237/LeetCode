Given a string s, find the longest palindromic substring in s. You may assume that the maximum length of s is 1000.

class Solution(object):
    def longestPalindrome(self, s):
        """
        :type s: str
        :rtype: str
        
        T = '#'.join('^{}$'.format(s))
        #print T
        n = len(T)
        P = [0] * n
        C = R = 0
        for i in range (1, n-1):
            mirr=2*C-i
            if i<R:
                P[i]=min(R-i,P[mirr])
            
            # Attempt to expand palindrome centered at i
            while(T[i+(1+P[i])]==T[i-(1+P[i])]): P[i]+=1
            
            # If palindrome centered at i expand past R,
            # adjust center based on expanded palindrome.
            if i+P[i]>R:
                C=i
                R=i+P[i]
        print P
        # Find the maximum element in P.
        maxLen, centerIndex = max((n, i) for i, n in enumerate(P))
        return s[(centerIndex  - maxLen)//2: (centerIndex  + maxLen)//2]
        """
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        t='#'.join('${}^'.format(s))
        n=len(t)
        p=[0]*n
        c,r=0,0
        for i in range(1,n-1):
            mirr=2*c-i
            if i<r:
                p[i]=min(r-i,p[mirr])
            while(t[i+(1+p[i])]==t[i-(1+p[i])]): p[i]+=1
            if i>r:
                c=i
                r=i+p[i]
        length,index= max((p,i) for i,p in enumerate(p))
        return s[(index-length)/2:(index+length)//2]    
